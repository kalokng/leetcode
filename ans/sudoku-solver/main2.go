package main

import "fmt"

type Pos struct {
	row, col int
}

type cell struct {
	pos    Pos
	hidden bool

	ri, rd, ci, cd *cell
}

type sparseMatrix struct {
	rows []*cell
	cols []*cell
	rown []int
	coln []int

	m map[Pos]*cell
}

func (sm *sparseMatrix) Solve() []int {
}

func solveSudoku(board [][]byte) {
	sm := &sparseMatrix{
		rows: make([]*cell, 6),
		cols: make([]*cell, 7),
		rown: make([]int, 6),
		coln: make([]int, 7),
		m:    make(map[Pos]*cell),
	}
	for _, p := range []Pos{
		{0, 0}, {0, 3}, {0, 6},
		{1, 0}, {1, 3},
		{2, 3}, {2, 4}, {2, 6},
		{3, 2}, {3, 4}, {3, 5},
		{4, 1}, {4, 2}, {4, 5}, {4, 6},
		{5, 1}, {5, 6},
	} {
		sm.m[p] = &cell{pos: p}
	}
	for i := range sm.rows {
		for j := range sm.cols {
			c, ok := sm.m[Pos{i, j}]
			if !ok {
				continue
			}
			sm.rown[i]++
			if sm.rows[i] == nil {
				sm.rows[i] = c
				c.ci = c
				c.cd = c
			} else {
				c.ci = sm.rows[i]
				c.cd = sm.rows[i].cd
				c.ci.cd, c.cd.ci = c, c
			}
		}
	}
	for j := range sm.cols {
		for i := range sm.rows {
			c, ok := sm.m[Pos{i, j}]
			if !ok {
				continue
			}
			sm.coln[j]++
			if sm.cols[j] == nil {
				sm.cols[j] = c
				c.ri = c
				c.rd = c
			} else {
				c.ri = sm.cols[j]
				c.rd = sm.cols[j].rd
				c.ri.rd, c.rd.ri = c, c
			}
		}
	}
	for i, r := range sm.rown {
		fmt.Println(i, r)
	}
	for i, r := range sm.coln {
		fmt.Println(i, r)
	}
}

func main() {
	//b := [][]byte{{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
	//	{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
	//	{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
	//	{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
	//	{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
	//	{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
	//	{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
	//	{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
	//	{'.', '.', '.', '.', '8', '.', '.', '7', '9'}}
	//b := [][]byte{
	//	{'.', '.', '.', '2', '7', '.', '.', '1', '.'},
	//	{'3', '.', '.', '.', '5', '9', '.', '.', '.'},
	//	{'.', '9', '.', '8', '.', '.', '2', '.', '4'},
	//	{'6', '8', '5', '.', '.', '.', '.', '.', '9'},
	//	{'.', '.', '4', '.', '.', '.', '.', '.', '.'},
	//	{'.', '.', '.', '.', '.', '.', '.', '3', '.'},
	//	{'9', '.', '.', '.', '.', '.', '.', '.', '.'},
	//	{'.', '.', '1', '.', '9', '.', '7', '2', '.'},
	//	{'.', '.', '.', '5', '.', '.', '8', '.', '.'},
	//}
	boards := [][][]byte{
		{
			{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
			{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
			{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
			{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
			{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
			{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
			{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
			{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
			{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
		},
		{
			{'.', '.', '.', '2', '7', '.', '.', '1', '.'},
			{'3', '.', '.', '.', '5', '9', '.', '.', '.'},
			{'.', '9', '.', '8', '.', '.', '2', '.', '4'},
			{'6', '8', '5', '.', '.', '.', '.', '.', '9'},
			{'.', '.', '4', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '3', '.'},
			{'9', '.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '1', '.', '9', '.', '7', '2', '.'},
			{'.', '.', '.', '5', '.', '.', '8', '.', '.'},
		},
		{{'.', '.', '9', '7', '4', '8', '.', '.', '.'}, {'7', '.', '.', '.', '.', '.', '.', '.', '.'}, {'.', '2', '.', '1', '.', '9', '.', '.', '.'}, {'.', '.', '7', '.', '.', '.', '2', '4', '.'}, {'.', '6', '4', '.', '1', '.', '5', '9', '.'}, {'.', '9', '8', '.', '.', '.', '3', '.', '.'}, {'.', '.', '.', '8', '.', '3', '.', '2', '.'}, {'.', '.', '.', '.', '.', '.', '.', '.', '6'}, {'.', '.', '.', '2', '7', '5', '9', '.', '.'}},
		{{'1', '.', '.', '.', '7', '.', '.', '3', '.'}, {'8', '3', '.', '6', '.', '.', '.', '.', '.'}, {'.', '.', '2', '9', '.', '.', '6', '.', '8'}, {'6', '.', '.', '.', '.', '4', '9', '.', '7'}, {'.', '9', '.', '.', '.', '.', '.', '5', '.'}, {'3', '.', '7', '5', '.', '.', '.', '.', '4'}, {'2', '.', '3', '.', '.', '9', '1', '.', '.'}, {'.', '.', '.', '.', '.', '2', '.', '4', '3'}, {'.', '4', '.', '.', '8', '.', '.', '.', '9'}},
	}
	for _, b := range boards {
		printBoard(b)
		solveSudoku(b)
		break

		printBoard(b)
		println()
	}
}

func printBoard(b [][]byte) {
	for i, r := range b {
		if i == 3 || i == 6 {
			fmt.Println("-----------")
		}
		for j, c := range r {
			if j == 3 || j == 6 {
				fmt.Print("|")
			}
			fmt.Printf("%c", c)
		}
		fmt.Println()
	}
}
